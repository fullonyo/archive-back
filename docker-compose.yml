version: '3.8'

services:
  # ================================
  # Nginx Reverse Proxy
  # ================================
  nginx:
    image: nginx:alpine
    container_name: vrchieve-nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Monitoramento
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/letsencrypt:/etc/letsencrypt:ro
      - backend-cdn-cache:/var/www/cdn-cache:ro
      - nginx-logs:/var/log/nginx
      - nginx-cache:/var/cache/nginx
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vrchieve-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ================================
  # VRCHIEVE Backend API
  # ================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: vrchieve-backend
    # Porta interna - nÃ£o exposta diretamente (apenas via Nginx)
    expose:
      - "3001"
    ports:
      # Porta para desenvolvimento direto (opcional)
      - "3001:3001"
      # Debug port para desenvolvimento
      - "9229:9229"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3001
      # Banco de dados externo (Hostinger)
      - DATABASE_URL=${DATABASE_URL}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      # JWT e autenticaÃ§Ã£o
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      # Redis local (container)
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-vrchieve123}
      # URLs da aplicaÃ§Ã£o
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}
      - BACKEND_URL=${BACKEND_URL:-http://localhost:3001}
      # Google Services
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
    env_file:
      - .env
    volumes:
      # Volume para cache CDN persistente
      - backend-cdn-cache:/app/cdn-cache
      - backend-logs:/app/logs
      # Volume para desenvolvimento (hot reload)
      - .:/app:delegated
      - /app/node_modules
      - /app/.npm
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - vrchieve-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const req = http.request({hostname: 'localhost', port: 3001, path: '/health', timeout: 5000}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.on('timeout', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Override do comando para desenvolvimento
    command: >
      sh -c "
        if [ \"$$NODE_ENV\" = \"development\" ]; then
          echo 'ðŸ”§ Starting in development mode with nodemon...'
          # Verificar conexÃ£o com banco de dados externo
          echo 'ðŸ”— Testing database connection...'
          npm install -g nodemon
          npx prisma generate
          nodemon --inspect=0.0.0.0:9229 server.js
        else
          echo 'ðŸš€ Starting in production mode...'
          # Verificar conexÃ£o com banco de dados externo
          echo 'ðŸ”— Testing database connection...'
          npx prisma generate
          node server.js
        fi
      "

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: vrchieve-redis
    # Expor porta apenas para desenvolvimento local (remover em produÃ§Ã£o)
    ports:
      - "127.0.0.1:6379:6379"  # Bind apenas para localhost
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-vrchieve123}
      --maxmemory ${REDIS_MAXMEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --save 900 1 --save 300 10 --save 60 10000
      --tcp-keepalive 60
      --tcp-backlog 511
      --protected-mode yes
      --bind 0.0.0.0
    volumes:
      - redis-data:/data
    networks:
      - vrchieve-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-vrchieve123}", "ping"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ================================
  # Redis Commander (Desenvolvimento)
  # ================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: vrchieve-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-vrchieve123}
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
      - URL_PREFIX=/redis-commander
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - vrchieve-network
    profiles:
      - dev-tools
    restart: unless-stopped

# ================================
# Volumes Persistentes
# ================================
volumes:
  # Dados do Redis
  redis-data:
    driver: local
    
  # Cache CDN do backend
  backend-cdn-cache:
    driver: local
    
  # Logs do backend
  backend-logs:
    driver: local
    
  # Logs do Nginx
  nginx-logs:
    driver: local
    
  # Cache do Nginx
  nginx-cache:
    driver: local

# ================================
# Rede Isolada
# ================================
networks:
  vrchieve-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16