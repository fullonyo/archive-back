// Script para aguardar reset do limite de conex√µes MySQL
const { connectDB } = require('./config/prisma');

async function waitForReset() {
  console.log('üïê Aguardando reset do limite de conex√µes MySQL...');
  console.log('‚è∞ O limite de 500 conex√µes/hora ser√° resetado em breve');
  console.log('üí° Enquanto isso, as configura√ß√µes foram otimizadas:');
  console.log('   - connection_limit: 2 (era 5)');
  console.log('   - Cache warming: DESABILITADO');
  console.log('   - Query middleware: DESABILITADO');
  console.log('   - Connection cleanup: DESABILITADO');
  
  let attempts = 0;
  const maxAttempts = 10;
  
  while (attempts < maxAttempts) {
    try {
      console.log(`\nüîÑ Tentativa ${attempts + 1}/${maxAttempts} de conectar...`);
      await connectDB();
      console.log('‚úÖ Conex√£o estabelecida com sucesso!');
      console.log('üöÄ Agora voc√™ pode executar: npm run dev');
      break;
    } catch (error) {
      attempts++;
      if (error.message.includes('max_connections_per_hour')) {
        console.log(`‚ùå Ainda no limite. Aguardando 2 minutos...`);
        await new Promise(resolve => setTimeout(resolve, 120000)); // 2 minutos
      } else {
        console.log(`‚ùå Erro diferente: ${error.message}`);
        await new Promise(resolve => setTimeout(resolve, 30000)); // 30 segundos
      }
    }
  }
  
  if (attempts >= maxAttempts) {
    console.log('‚ùå N√£o foi poss√≠vel conectar ap√≥s todas as tentativas');
    console.log('üí° Tente novamente em alguns minutos ou aguarde o reset da hora');
  }
}

waitForReset().catch(console.error);
