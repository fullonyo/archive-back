version: '3.8'

# Configura√ß√µes espec√≠ficas para PRODU√á√ÉO
# Este arquivo deve ser usado junto com docker-compose.yml:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  nginx:
    # Sobrescrever volumes para usar configura√ß√£o de produ√ß√£o
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/vrchieve-prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/conf.d/cache-security.conf:/etc/nginx/conf.d/cache-security.conf:ro
      - ./nginx/conf.d/monitoring.conf:/etc/nginx/conf.d/monitoring.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - backend-cdn-cache:/var/www/cdn-cache:ro
      - nginx-logs:/var/log/nginx
      - nginx-cache:/var/cache/nginx
    environment:
      - NGINX_ENV=production
    # Remover portas de desenvolvimento (mantem apenas 80 e 443)
    ports:
      - "80:80"
      - "443:443"
    # Otimiza√ß√µes para produ√ß√£o
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  backend:
    environment:
      - NODE_ENV=production
      # Banco de dados externo (Hostinger) - configura√ß√£o de produ√ß√£o
      - DATABASE_URL=${DATABASE_URL}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      # JWT e autentica√ß√£o (herdar do .env)
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      # Redis interno (container)
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-vrchieve123}
      # URLs da aplica√ß√£o para produ√ß√£o
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_URL=${BACKEND_URL}
      # Google Services
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
    # Remover portas de desenvolvimento expostas
    ports: []
    # Remover volumes de desenvolvimento
    volumes:
      - backend-cdn-cache:/app/cdn-cache
      - backend-logs:/app/logs
    # Comando de produ√ß√£o otimizado
    command: >
      sh -c "
        echo 'üöÄ Backend starting in production mode...'
        echo 'üîó Connecting to external database at ${DB_HOST}:${DB_PORT}'
        npx prisma generate
        # Opcional: executar migra√ß√µes se necess√°rio
        # npx prisma migrate deploy
        node server.js
      "
    # Configura√ß√µes de recursos para produ√ß√£o
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5

  redis:
    environment:
      - REDIS_ENV=production
    # Remover exposi√ß√£o da porta Redis em produ√ß√£o (apenas interno)
    ports: []
    # Configura√ß√µes otimizadas para produ√ß√£o
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-vrchieve123}
      --maxmemory ${REDIS_MAXMEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 900 1 --save 300 10 --save 60 10000
      --tcp-keepalive 60
      --tcp-backlog 511
      --timeout 300
      --loglevel notice
      --slowlog-log-slower-than 10000
      --slowlog-max-len 128
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Desabilitar Redis Commander em produ√ß√£o por quest√µes de seguran√ßa
  redis-commander:
    profiles:
      - never-start